pub struct AGLTool
{
    /**
     * Screen pixel width
     */
    screen_width: f32,

    /**
     * Screen pixel height
     */
    screen_height: f32,

    /**
     * Screen half pixel width
     */
    screen_half_width: f32,

    /**
     * Screen half pixel height
     */
    screen_half_height: f32,

    /**
     * Screen width / height
     */
    screen_ratio: f32,

    /**
     * Screen ratio / halfWidth
     */
    ratio_divide_half_width: f32,

    /**
     * Screen halfWidth / ratio
     */
    half_width_divide_ratio: f32,
}

impl AGLTool {
    pub fn create(width: f32, height: f32) -> Self {
        let screen_half_width = width / 2f32;
        let screen_ratio = width / height as f32;
        Self {
            screen_width: width,
            screen_height: height,
            screen_half_width,
            screen_half_height: height / 2f32,
            screen_ratio,
            ratio_divide_half_width: screen_ratio / screen_half_width,
            half_width_divide_ratio: screen_half_width / screen_ratio,
        }
    }

    pub fn update(&mut self, width: f32, height: f32) {
        println!("update -> {} {}", width, height);
        self.screen_width = width;
        self.screen_height = height;
        self.screen_half_width = width / 2f32;
        self.screen_half_height = height / 2f32;
        self.screen_ratio = width / height;
        self.ratio_divide_half_width = self.screen_ratio / self.screen_half_width;
        self.half_width_divide_ratio = self.screen_half_width / self.screen_ratio;
    }
}

impl AGLTool {
    /**
     * Convert screen width to openGL width
     * same as (screen_width) * AGLTool->screen_ratio / AGLTool->screen_half_width
     */
    pub fn to_glwidth(&self, screen_width: f32) -> f32 {
        screen_width * self.ratio_divide_half_width
    }


    /**
     * Convert pixel height to openGL height
     */
    pub fn to_glheight(&self, screen_height: f32) -> f32 {
        screen_height / self.screen_half_height
    }
    /**
     * Convert screen x to openGL x
     */
    pub fn to_glx(&self, screen_x: f32) -> f32 {
        self.to_glwidth(screen_x) - self.screen_ratio
    }
    /**
     * Convert screen Y to openGL Y
     */
    pub fn to_gly(&self, screen_y: f32) -> f32 {
        1.0f32 - self.to_glheight(screen_y)
    }
    /**
     * Convert openGL Width to screen width
     * same as (gl_width) * AGLTool->screen_half_width / AGLTool->screen_ratio
     */
    pub fn to_screen_width(&self, gl_width: f32) -> f32 {
        gl_width * self.half_width_divide_ratio
    }
    /**
     * Convert openGL Height to screen height
     */
    pub fn to_screen_height(&self, gl_height: f32) -> f32 {
        gl_height * self.screen_half_height
    }
    /**
     * Convert openGL x to screen x
     */
    pub fn to_screen_x(&self, gl_x: f32) -> f32 {
        self.to_screen_width(gl_x + self.screen_ratio)
    }
    /**
     * Convert openGL y to screen y
     */
    pub fn to_screen_y(&self, gl_y: f32) -> f32 {
        self.to_screen_height(1.0f32 - (gl_y as f32))
    }
    /**
     * Convert width to texcoord width
     * parameters both openGL or screen coordinate
     */
    pub fn to_texcoord_width(&self, width: f32, texture_width: f32) -> f32 {
        (width / texture_width) as f32
    }
    /**
     * Convert height to texcoord height
     * parameters both openGL or screen coordinate
     */
    pub fn to_texcoord_height(&self, height: f32, texture_height: f32) -> f32 {
        (height / texture_height) as f32
    }
}